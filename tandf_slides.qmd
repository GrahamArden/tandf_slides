---
title: "Proknow: Can we automate the process"
subtitle: ""
format: clean-revealjs
html-math-method:
  method: mathjax
  url: "https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"
author:
  - name: "Graham Arden"
    orcid: 0000-0000-0000-0000
    email: graham.arden@nhs.net
    affiliations: Radiation Physics Department, The Queen's Centre, Castle Hill Hospital
date: last-modified
title-slide-attributes:
  data-background-image: ./images/NHS_Humber.png
  data-background-size: contain
  data-background-opacity: "1.0"
incremental: true
---
### How much can we automate allocation to collections?
- It depends
- You need quite a lot of imformation to decide which collection (if any) a plan belongs to
---

## How much can we automate allocation to collections?

- Dose
- Fractionation
- PTV volume (for SABR collections)
- Laterality (for breast collections)
---



## Unfortunately, it's not that simple

- For scorecards to work we need to allocate patients to the correct collection
- The volumes need to use the names defined in the scorecards

## Unfortunately, it's not that simple
::: {.nonincremental}
![](./images_private/PTVs.PNG)
:::

## Unfortunately, it's not that simple
::: {.nonincremental}
- Not all the data we require _is in Proknow_

- For laterality we _could_ apply a regular expression to the plan name:

```{.python}

allocate_plan_id_lookups = [(re.compile(r"l(?:t|eft)?\s*(Lung)", re.IGNORECASE), national_collection_name_lung, "LEFT"),
                            (re.compile(r"r(?:t|ight)?\s*(Lung)", re.IGNORECASE), national_collection_name_lung, "RIGHT"),
                            (re.compile(r"l(?:t|eft)?\s*((?:(b)(r)?(east?)?)|cw|chestwall)", re.IGNORECASE), national_collection_name_breast, "LEFT"),
                            (re.compile(r"r(?:t|ight)?\s*((?:(b)(r)?(east?)?)|cw|chestwall)", re.IGNORECASE), national_collection_name_breast, "RIGHT")]
```

- but this doesn't always work.

:::

## But this data _is in ARIA_

- We just need to extract it and match it with the Proknow data
  
## Example slide

### This is a subtitle

Here we have some text that may run over several lines of the slide frame,
depending on how long it is.

- first item 
    - A sub item

Next, we'll brief review some theme-specific components.

- Note that _all_ of the standard Reveal.js
[features](https://quarto.org/docs/presentations/revealjs/)
can be used with this theme, even if we don't highlight them here.

## Additional theme classes

### Some extra things you can do with the clean theme

Special classes for emphasis

- `.alert` class for default emphasis, e.g. [important note]{.alert}.
- `.fg` class for custom colour, e.g. [important note]{.fg style="--col: #e64173"}.
- `.bg` class for custom background, e.g. [important note]{.bg style="--col: #e64173"}.

Cross-references

- `.button` class provides a Beamer-like button, e.g.
[[Summary]{.button}](#sec-summary)

## Want more?

### See our longer demo slides

We've deliberarely kept this template lean, to get you up and running as fast as
possible.

We provide a separate
[demo template](https://github.com/grantmcdermott/quarto-revealjs-clean-demo),
with more examples for integrating code, tables, figures, etc.

  - See the live demo slides
  [here](https://grantmcdermott.com/quarto-revealjs-clean-demo/template.html).

## Summary {#sec-summary}

### A minimalist and elegant presentation theme

The Quarto reveal.js clean theme aims to be a minimalist and elegant presention
theme. Here are some options to get you started:

Add the theme to an existing project.

```{.bash}
quarto install extension grantmcdermott/quarto-revealjs-clean
```

... or, create a new project using this slide deck as a lean template.

```{.bash}
quarto use template grantmcdermott/quarto-revealjs-clean
```

... or, create a new project using the demo slide deck as a full template.

```{.bash}
quarto use template grantmcdermott/quarto-revealjs-clean-demo
```
