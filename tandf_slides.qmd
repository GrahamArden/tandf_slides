---
title: "Proknow: Putting it all together "
subtitle: "Using the modules along with ARIA"
format: clean-revealjs
code-block-height: 650px
html-math-method:
  method: mathjax
  url: "https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"
author:
  - name: "Graham Arden"
    orcid: 0009-0009-4124-5518
    email: graham.arden@nhs.net
    affiliations: Radiation Physics Department, The Queen's Centre, Castle Hill Hospital
date: last-modified
title-slide-attributes:
  data-background-image: ./images/NHS_Humber.png
  data-background-size: contain
  data-background-opacity: "0.8"
incremental: true
#toc: true
---

## What is our goal? {.center}
- For scorecards to work we need to allocate patients to the correct collection

  
## Can we automate allocation to collections? {.center}

- It depends
- You need some information to decide which collection (if any) a plan belongs to


## What information do we need? {.center}

  - Dose
  - Fractionation
  - PTV volume (for SABR collections)
  - Laterality (for breast collections)
  - Patient age at time of treatment (for breast IMN collections)


## Unfortunately, it's not that simple {.center}
::: {.nonincremental}
- Not all the data we require _is in Proknow_
:::

::: {.incremental}
- However we can extract the data that is there using some Python and the modules that the T&F group have produced
- We _may_ be able to extract the rest of the data from our Record and Verify system (ARIA) using a bit of SQL
- ....but only if it's there in the first place!

:::

## The Scripting T&F group modules {.center}
- These are Python modules which simplify using Python to query the ProKnow API
- They have now been released under an open-source licence
- Will return data either as CSV files or Pandas Datframes


## Pandas {.center}
- This is a Python library for dealing with tabular data in the form of _dataframes_
- Allows us to extract subsets of data based upon the values within a column
- Can do SQL-like joins between _dataframs_

## The steps I used {.center}
- Get a list of patients in ProKnow that aren't allocated to a collection (national or _local_)
- From ProKnow extract the dose and plan objects for each of these patients
- Using an SQL query on our ARIA reports database extract some additional data relating to these patients
- Combine it with the data in Proknow
- Use this _expanded_ data to sort ther patients into collections

## Getting the objects for a list of patients {.center}
::: {.nonincremental}
```{.python}
Patients_no_collection = NHSPatientEntities(config_path=config_path,
                                            patient_ids=patient_list)
```
- Create a dataframe containing all the objects and then seperate it into dose and plan objects
```{.python}
df_no_collection = Patients_no_collection.write_all_entities_to_dataframe()
df_doses = df_no_collection[df_no_collection['Modality'] == 'RTDOSE']
df_plans = df_no_collection[df_no_collection['Modality'] == 'RTPLAN']
```
- Recombine these into a single dataframe containing only the relevant data
```{.python}
merged_df = pd.merge(df_doses, df_plans, left_on='Dose.RefPlan', right_on='Plan.EntityID', how='inner')
```

:::

## Laterality {.center}
::: {.nonincremental}
- For laterality we _could_ apply a regular expression to the plan name:

```{.python}

allocate_plan_id_lookups = [(re.compile(r"l(?:t|eft)?\s*(Lung)", re.IGNORECASE), national_collection_name_lung, "LEFT"),
                            (re.compile(r"r(?:t|ight)?\s*(Lung)", re.IGNORECASE), national_collection_name_lung, "RIGHT"),
                            (re.compile(r"l(?:t|eft)?\s*((?:(b)(r)?(east?)?)|cw|chestwall)", re.IGNORECASE), national_collection_name_breast, "LEFT"),
                            (re.compile(r"r(?:t|ight)?\s*((?:(b)(r)?(east?)?)|cw|chestwall)", re.IGNORECASE), national_collection_name_breast, "RIGHT")]
```
:::
::: {.incremental}
- This found _most_ of the relevant plans.
:::



## But this data _may be_ in ARIA {.center}

- We just need to extract it and match it with the Proknow data



## Prescription data {.center}
::: {.r-stack}
![](./images/NHS21_prescription.PNG){.fragment width="500" height="350"}

:::

::: {.incremental}
- This gives us total site, dose, number of fractions and, in the case of breast patients , laterality

###

- We can also extract the patient date of birth ```(Patient.DateOfBirth)``` and plan creation date ```(PlanSetup.CreationDate)```

:::



## Use a bit of SQL {.center}

::: {.nonincremental}

```{.sql}
DECLARE @StartDate Date = '01/01/2019'

SELECT DISTINCT dbo.Course.CourseId AS 'Course.ID', 
                dbo.Patient.PatientId AS 'MRN', 
                dbo.RTPlan.PrescribedDose AS 'Prescription.Dose_per_fraction',
                dbo.Prescription.PrescriptionName AS 'Prescription.Name',
                dbo.Prescription.NumberOfFractions AS 'Prescription.Fractions',
                dbo.Prescription.Site AS 'Prescription.Site',
                dbo.PlanSetup.CreationDate AS 'Date.Treatment_Date',
                dbo.RTPlan.PlanUID AS 'Plan.SeriesUID',
                Patient.DateOfBirth AS 'Date.Patient_DOB'

FROM            dbo.RTPlan INNER JOIN

                         dbo.PlanSetup ON dbo.RTPlan.PlanSetupSer = dbo.PlanSetup.PlanSetupSer INNER JOIN

                         dbo.Patient INNER JOIN

                         dbo.Course ON dbo.Patient.PatientSer = dbo.Course.PatientSer ON dbo.PlanSetup.CourseSer = dbo.Course.CourseSer INNER JOIN

                         dbo.PrescriptionAnatomy INNER JOIN

                         dbo.PrescriptionAnatomyItem ON dbo.PrescriptionAnatomy.PrescriptionAnatomySer = dbo.PrescriptionAnatomyItem.PrescriptionAnatomySer INNER JOIN

                         dbo.Prescription ON dbo.PrescriptionAnatomy.PrescriptionSer = dbo.Prescription.PrescriptionSer ON dbo.PlanSetup.PrescriptionSer = dbo.Prescription.PrescriptionSer

WHERE        (dbo.PrescriptionAnatomyItem.ItemType LIKE 'TOTAL DOSE%') AND (dbo.Patient.PatientId LIKE 'HEY%' OR

                         dbo.Patient.PatientId LIKE 'PAS%' OR

                         dbo.Patient.PatientId LIKE 'NLG%') AND

						 dbo.PlanSetup.CreationDate >= @StartDate			
```
:::

## Call the SQL from within the Python script

::: {.nonincremental}

```{.python}
import pyodbc
import pandas as pd

conn = pyodbc.connect('DRIVER={SQL Server};SERVER='+ARIA_server+';DATABASE='+ARIA_database+';UID='+ARIA_username+';PWD='+ARIA_password)

def aria_query(sql_query_file):
    with open(sql_query_file, 'r') as file:
        sql_query = file.read()
    df_AriaQuery = pd.read_sql_query(sql_query, conn)

    return df_AriaQuery

df_prescription_data = aria_query('SQL/ProknowPrescription.sql')
df_prescription_data_clean = df_prescription_data.dropna()
```
:::

## Call the SQL from within the Python script

::: {.nonincremental}

```{.python code-line-numbers="6-11"}
import pyodbc
import pandas as pd

conn = pyodbc.connect('DRIVER={SQL Server};SERVER='+ARIA_server+';DATABASE='+ARIA_database+';UID='+ARIA_username+';PWD='+ARIA_password)

def aria_query(sql_query_file):
    with open(sql_query_file, 'r') as file:
        sql_query = file.read()
    df_AriaQuery = pd.read_sql_query(sql_query, conn)

    return df_AriaQuery

df_prescription_data = aria_query('SQL/ProknowPrescription.sql')
df_prescription_data_clean = df_prescription_data.dropna()
```
:::

## Call the SQL from within the Python script

::: {.nonincremental}

```{.python code-line-numbers="13-14"}
import pyodbc
import pandas as pd

conn = pyodbc.connect('DRIVER={SQL Server};SERVER='+ARIA_server+';DATABASE='+ARIA_database+';UID='+ARIA_username+';PWD='+ARIA_password)

def aria_query(sql_query_file):
    with open(sql_query_file, 'r') as file:
        sql_query = file.read()
    df_AriaQuery = pd.read_sql_query(sql_query, conn)

    return df_AriaQuery

df_prescription_data = aria_query('SQL/ProknowPrescription.sql')
df_prescription_data_clean = df_prescription_data.dropna()
```
:::


## We can then combine the data from ProKnow with the data obtained from ARIA {.center} 
::: {.nonincremental}
- We can perfrom an inner join on the merged_df and the prescription data (df_prescription_data) using the Plan.SeriesUID as the key

```{.python}
df_prescription_data_clean['Plan.SeriesUID'] = df_prescription_data_clean['Plan.SeriesUID'].astype(str)
merged_df['Plan.SeriesUID'] = merged_df['Plan.SeriesUID'].astype(str)
df_all_data = pd.merge(merged_df, df_prescription_data_clean, on='Plan.SeriesUID', how='inner')
```
:::

## Additional coding for lung SABR collections {.center}

- I also had some additional code to find the PTV with the highest dose (in the case of multiple PTVs)
- This then returns the volume of the relevant PTV (which we need for SABR collections)

## Seperating our data into collections {.center}
::: {.nonincremental}
- At this point all our data is in one large dataframe containing _all_ the unallocated plans
- We then seperate it into a seperate dataframe for each collection

```{.python}
df_NHS01 = df_lung_sabr[(df_lung_sabr['ROI.Volume'] < 20.0) 
                       & (df_lung_sabr['Prescription.TotalDose'] == 54.0) 
                       & (df_lung_sabr['Prescription.Fractions'] == 3)]
```
.
```{.python}
df_NHS21 = df_all_data[(df_all_data['Prescription.Name'].str.contains('TP-CP-1 ')) 
                       & (df_all_data['Prescription.Site'].str.contains('Left')) 
                       & (df_all_data['Prescription.TotalDose'] == 26.0) 
                       & (df_all_data['Prescription.Fractions'] == 5)
                       & (~df_all_data['Plan.Label'].str.contains('SCF'))]
```
:::

## {.center}
::: {.nonincremental}
- We can then move the relevant dose object into the collection

```{.python}
NHSMoveEntityDataframeToCollection(config_path=config_path, input_df=df_NHS01,
                                target_collection_name='NHS01_LUNG_SABR-6.1 <20cc 54/3')
```
.
```{.python}
NHSMoveEntityDataframeToCollection(config_path=config_path, input_df=df_NHS21, 
                                target_collection_name='NHS21_LtBrst_CWall_Partial_26/5')
```
:::
## The source code is now available {.center}

The source code for the modules is now available on the T&F group Github page.

```{.bash}
git clone https://github.com/nhs-proknow/proknow-scripting-tandf.git
```
A packaged version is also available in ProKnow under the 'Documents' workspace.

My own scripts for sorting into collections are on Github

```{.bash}
git clone https://github.com/nhs-proknow/Hull_tandf_scripts.git
```
..but these will need heavily modifying to work in other centres

## Thank you {.center}
- Any question?